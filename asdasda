-- My Own UI Library - Single File Inspired by Fluent
-- A custom Roblox UI library with window, tabs, sections, and elements
-- Improved animations and interactions

local MyOwnUI = {}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- Utility functions
local function Create(instanceType, properties, children)
	local instance = Instance.new(instanceType)
	for prop, value in pairs(properties or {}) do
		instance[prop] = value
	end
	for _, child in pairs(children or {}) do
		child.Parent = instance
	end
	return instance
end

local function AddCorner(instance, radius)
	local corner = Create("UICorner", {CornerRadius = radius or UDim.new(0, 6)})
	corner.Parent = instance
	return corner
end

local function AddStroke(instance, color, thickness)
	local stroke = Create("UIStroke", {
		Color = color or Color3.fromRGB(0, 0, 0),
		Thickness = thickness or 1
	})
	stroke.Parent = instance
	return stroke
end

-- Animation utilities
local function Tween(instance, properties, duration, easingStyle, easingDirection)
	local tweenInfo = TweenInfo.new(duration or 0.3, easingStyle or Enum.EasingStyle.Quad, easingDirection or Enum.EasingDirection.Out)
	local tween = TweenService:Create(instance, tweenInfo, properties)
	tween:Play()
	return tween
end

-- Themes
local Themes = {
	Dark = {
		Main = Color3.fromRGB(25, 25, 25),
		Secondary = Color3.fromRGB(35, 35, 35),
		Tertiary = Color3.fromRGB(45, 45, 45),
		Text = Color3.fromRGB(255, 255, 255),
		Accent = Color3.fromRGB(100, 200, 255),
		Hover = Color3.fromRGB(120, 220, 255)
	},
	Light = {
		Main = Color3.fromRGB(240, 240, 240),
		Secondary = Color3.fromRGB(220, 220, 220),
		Tertiary = Color3.fromRGB(200, 200, 200),
		Text = Color3.fromRGB(0, 0, 0),
		Accent = Color3.fromRGB(0, 100, 200),
		Hover = Color3.fromRGB(20, 120, 220)
	}
}

local CurrentTheme = "Dark"

-- Main GUI
local ScreenGui = Create("ScreenGui", {
	Parent = game:GetService("CoreGui"),
	ResetOnSpawn = false
})

-- Window creation
function MyOwnUI:CreateWindow(config)
	config = config or {}
	local title = config.Title or "My Own UI"
	local theme = config.Theme or "Dark"
	CurrentTheme = theme

	local windowFrame = Create("Frame", {
		Size = UDim2.new(0, 600, 0, 400),
		Position = UDim2.new(0.5, -300, 0.5, -200),
		BackgroundColor3 = Themes[theme].Main,
		Parent = ScreenGui
	}, {
		Create("UICorner", {CornerRadius = UDim.new(0, 10)})
	})

	-- Make window draggable
	local dragging = false
	local dragStart = nil
	local startPos = nil

	titleBar.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = windowFrame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
			local delta = input.Position - dragStart
			windowFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		end
	end)

	local titleBar = Create("Frame", {
		Size = UDim2.new(1, 0, 0, 40),
		BackgroundColor3 = Themes[theme].Secondary,
		Parent = windowFrame
	}, {
		Create("UICorner", {CornerRadius = UDim.new(0, 10)}),
		Create("TextLabel", {
			Size = UDim2.new(1, -20, 1, 0),
			Position = UDim2.new(0, 10, 0, 0),
			Text = title,
			TextColor3 = Themes[theme].Text,
			TextSize = 18,
			Font = Enum.Font.SourceSansBold,
			BackgroundTransparency = 1
		})
	})

	local contentFrame = Create("Frame", {
		Size = UDim2.new(1, -20, 1, -60),
		Position = UDim2.new(0, 10, 0, 50),
		BackgroundTransparency = 1,
		Parent = windowFrame
	})

	local tabContainer = Create("Frame", {
		Size = UDim2.new(0, 150, 1, 0),
		BackgroundColor3 = Themes[theme].Tertiary,
		Parent = contentFrame
	}, {
		Create("UICorner", {CornerRadius = UDim.new(0, 6)})
	})

	local tabList = Create("UIListLayout", {
		Parent = tabContainer,
		Padding = UDim.new(0, 5)
	})

	local mainContent = Create("Frame", {
		Size = UDim2.new(1, -170, 1, 0),
		Position = UDim2.new(0, 160, 0, 0),
		BackgroundColor3 = Themes[theme].Secondary,
		Parent = contentFrame
	}, {
		Create("UICorner", {CornerRadius = UDim.new(0, 6)})
	})

	local window = {
		Frame = windowFrame,
		Tabs = {},
		CurrentTab = nil,
		Theme = theme
	}

	function window:AddTab(tabName)
		local tabButton = Create("TextButton", {
			Size = UDim2.new(1, -10, 0, 30),
			Position = UDim2.new(0, 5, 0, 0),
			Text = tabName,
			TextColor3 = Themes[theme].Text,
			BackgroundColor3 = Themes[theme].Accent,
			Parent = tabContainer
		}, {
			Create("UICorner", {CornerRadius = UDim.new(0, 4)})
		})

		local tabContent = Create("ScrollingFrame", {
			Size = UDim2.new(1, -20, 1, -20),
			Position = UDim2.new(0, 10, 0, 10),
			BackgroundTransparency = 1,
			ScrollBarThickness = 4,
			Visible = false,
			Parent = mainContent
		}, {
			Create("UIListLayout", {
				Padding = UDim.new(0, 10)
			})
		})

		local tab = {
			Name = tabName,
			Button = tabButton,
			Content = tabContent,
			Sections = {}
		}

		function tab:AddSection(sectionName)
			local sectionFrame = Create("Frame", {
				Size = UDim2.new(1, 0, 0, 100),
				BackgroundColor3 = Themes[theme].Tertiary,
				Parent = tabContent
			}, {
				Create("UICorner", {CornerRadius = UDim.new(0, 6)}),
				Create("TextLabel", {
					Size = UDim2.new(1, -20, 0, 20),
					Position = UDim2.new(0, 10, 0, 5),
					Text = sectionName,
					TextColor3 = Themes[theme].Text,
					TextSize = 14,
					Font = Enum.Font.SourceSansBold,
					BackgroundTransparency = 1
				})
			})

			local sectionContent = Create("Frame", {
				Size = UDim2.new(1, -20, 1, -30),
				Position = UDim2.new(0, 10, 0, 25),
				BackgroundTransparency = 1,
				Parent = sectionFrame
			}, {
				Create("UIListLayout", {
					Padding = UDim.new(0, 5)
				})
			})

			local section = {
				Name = sectionName,
				Frame = sectionFrame,
				Content = sectionContent
			}

			function section:AddButton(buttonText, callback)
				local button = Create("TextButton", {
					Size = UDim2.new(1, 0, 0, 30),
					Text = buttonText,
					TextColor3 = Themes[theme].Text,
					BackgroundColor3 = Themes[theme].Accent,
					Parent = sectionContent
				}, {
					Create("UICorner", {CornerRadius = UDim.new(0, 4)})
				})

				-- Hover effects
				local originalColor = Themes[theme].Accent
				button.MouseEnter:Connect(function()
					Tween(button, {BackgroundColor3 = Themes[theme].Hover}, 0.2)
				end)
				button.MouseLeave:Connect(function()
					Tween(button, {BackgroundColor3 = originalColor}, 0.2)
				end)
				button.MouseButton1Down:Connect(function()
					Tween(button, {Size = UDim2.new(1, 0, 0, 28)}, 0.1)
				end)
				button.MouseButton1Up:Connect(function()
					Tween(button, {Size = UDim2.new(1, 0, 0, 30)}, 0.1)
					if callback then callback() end
				end)

				return button
			end

			function section:AddToggle(toggleText, default, callback)
				local toggleFrame = Create("Frame", {
					Size = UDim2.new(1, 0, 0, 30),
					BackgroundTransparency = 1,
					Parent = sectionContent
				})

				local toggleButton = Create("TextButton", {
					Size = UDim2.new(0, 20, 0, 20),
					Position = UDim2.new(1, -25, 0, 5),
					Text = "",
					BackgroundColor3 = default and Themes[theme].Accent or Themes[theme].Tertiary,
					Parent = toggleFrame
				}, {
					Create("UICorner", {CornerRadius = UDim.new(0, 4)})
				})

				local toggleLabel = Create("TextLabel", {
					Size = UDim2.new(1, -35, 1, 0),
					Text = toggleText,
					TextColor3 = Themes[theme].Text,
					TextSize = 14,
					BackgroundTransparency = 1,
					Parent = toggleFrame
				})

				local toggled = default or false
				toggleButton.BackgroundColor3 = toggled and Themes[theme].Accent or Themes[theme].Tertiary
				toggleButton.MouseButton1Click:Connect(function()
					toggled = not toggled
					Tween(toggleButton, {BackgroundColor3 = toggled and Themes[theme].Accent or Themes[theme].Tertiary}, 0.2)
					if callback then callback(toggled) end
				end)

				return toggleFrame
			end

			function section:AddSlider(sliderText, min, max, default, callback)
				local sliderFrame = Create("Frame", {
					Size = UDim2.new(1, 0, 0, 50),
					BackgroundTransparency = 1,
					Parent = sectionContent
				})

				local sliderLabel = Create("TextLabel", {
					Size = UDim2.new(1, 0, 0, 20),
					Text = sliderText .. ": " .. (default or min),
					TextColor3 = Themes[theme].Text,
					TextSize = 14,
					BackgroundTransparency = 1,
					Parent = sliderFrame
				})

				local sliderBar = Create("Frame", {
					Size = UDim2.new(1, 0, 0, 10),
					Position = UDim2.new(0, 0, 0, 25),
					BackgroundColor3 = Themes[theme].Tertiary,
					Parent = sliderFrame
				}, {
					Create("UICorner", {CornerRadius = UDim.new(0, 5)})
				})

				local sliderFill = Create("Frame", {
					Size = UDim2.new((default - min) / (max - min), 0, 1, 0),
					BackgroundColor3 = Themes[theme].Accent,
					Parent = sliderBar
				}, {
					Create("UICorner", {CornerRadius = UDim.new(0, 5)})
				})

				local dragging = false
				sliderBar.InputBegan:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						dragging = true
					end
				end)

				UserInputService.InputEnded:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						dragging = false
					end
				end)

				UserInputService.InputChanged:Connect(function(input)
					if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
						local percent = math.clamp((input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
						local value = min + (max - min) * percent
						Tween(sliderFill, {Size = UDim2.new(percent, 0, 1, 0)}, 0.1)
						sliderLabel.Text = sliderText .. ": " .. math.floor(value)
						if callback then callback(value) end
					end
				end)

				return sliderFrame
			end

			table.insert(tab.Sections, section)
			return section
		end

		-- Hover effects
		tabButton.MouseEnter:Connect(function()
			if tab ~= window.CurrentTab then
				Tween(tabButton, {BackgroundColor3 = Themes[theme].Hover}, 0.2)
			end
		end)
		tabButton.MouseLeave:Connect(function()
			if tab ~= window.CurrentTab then
				Tween(tabButton, {BackgroundColor3 = Themes[theme].Tertiary}, 0.2)
			end
		end)

		tabButton.MouseButton1Click:Connect(function()
			if window.CurrentTab then
				Tween(window.CurrentTab.Content, {GroupTransparency = 1}, 0.3)
				task.delay(0.15, function()
					window.CurrentTab.Content.Visible = false
				end)
				Tween(window.CurrentTab.Button, {BackgroundColor3 = Themes[theme].Tertiary}, 0.2)
			end
			tabContent.GroupTransparency = 1
			tabContent.Visible = true
			Tween(tabContent, {GroupTransparency = 0}, 0.3)
			Tween(tabButton, {BackgroundColor3 = Themes[theme].Accent}, 0.2)
			window.CurrentTab = tab
		end)

		table.insert(window.Tabs, tab)
		return tab
	end

	function window:SelectTab(tabName)
		for _, tab in pairs(window.Tabs) do
			if tab.Name == tabName then
				tab.Button:FindFirstChildOfClass("TextButton").MouseButton1Click:Fire()
				break
			end
		end
	end

	function window:Destroy()
		ScreenGui:Destroy()
	end

	return window
end

-- Notification system
function MyOwnUI:Notify(title, text, duration)
	duration = duration or 3
	local notif = Create("Frame", {
		Size = UDim2.new(0, 300, 0, 80),
		Position = UDim2.new(1, 20, 1, -100),
		BackgroundColor3 = Themes[CurrentTheme].Main,
		Parent = ScreenGui
	}, {
		Create("UICorner", {CornerRadius = UDim.new(0, 8)}),
		Create("TextLabel", {
			Size = UDim2.new(1, -20, 0, 20),
			Position = UDim2.new(0, 10, 0, 5),
			Text = title,
			TextColor3 = Themes[CurrentTheme].Text,
			TextSize = 16,
			Font = Enum.Font.SourceSansBold,
			BackgroundTransparency = 1
		}),
		Create("TextLabel", {
			Size = UDim2.new(1, -20, 0, 40),
			Position = UDim2.new(0, 10, 0, 25),
			Text = text,
			TextColor3 = Themes[CurrentTheme].Text,
			TextSize = 14,
			TextWrapped = true,
			BackgroundTransparency = 1
		})
	})

	-- Slide in
	Tween(notif, {Position = UDim2.new(1, -320, 1, -100)}, 0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
	task.wait(duration)
	-- Slide out
	Tween(notif, {Position = UDim2.new(1, 20, 1, -100)}, 0.5, Enum.EasingStyle.Back, Enum.EasingDirection.In)
	task.wait(0.5)
	notif:Destroy()
end

return MyOwnUI

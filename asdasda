local Library = {
	Version = "1.0.0",
	Windows = {},
	Flags = {},
}

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

function Library:Window(Options)
	Options = Options or {}
	local Title = Options.Title or "OwnUI"
	local Size = Options.Size or UDim2.fromOffset(500, 600)
	local Position = Options.Position or UDim2.fromScale(0.5, 0.5)

	local Window = {
		Tabs = {},
		CurrentTab = nil,
	}

	local ScreenGui = Instance.new("ScreenGui")
	ScreenGui.Name = "OwnUI"
	ScreenGui.Parent = game:GetService("CoreGui")

	local MainFrame = Instance.new("Frame")
	MainFrame.Name = "Main"
	MainFrame.Size = Size
	MainFrame.Position = Position
	MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
	MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	MainFrame.BorderSizePixel = 0
	MainFrame.Parent = ScreenGui

	local UICorner = Instance.new("UICorner")
	UICorner.CornerRadius = UDim.new(0, 6)
	UICorner.Parent = MainFrame

	local TitleLabel = Instance.new("TextLabel")
	TitleLabel.Text = Title
	TitleLabel.Size = UDim2.new(1, 0, 0, 40)
	TitleLabel.BackgroundTransparency = 1
	TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	TitleLabel.Font = Enum.Font.SourceSansBold
	TitleLabel.TextSize = 18
	TitleLabel.Parent = MainFrame

	local TabHolder = Instance.new("Frame")
	TabHolder.Size = UDim2.new(1, 0, 0, 30)
	TabHolder.Position = UDim2.new(0, 0, 0, 40)
	TabHolder.BackgroundTransparency = 1
	TabHolder.Parent = MainFrame

	local TabList = Instance.new("UIListLayout")
	TabList.FillDirection = Enum.FillDirection.Horizontal
	TabList.SortOrder = Enum.SortOrder.LayoutOrder
	TabList.Parent = TabHolder

	local Content = Instance.new("Frame")
	Content.Size = UDim2.new(1, 0, 1, -70)
	Content.Position = UDim2.new(0, 0, 0, 70)
	Content.BackgroundTransparency = 1
	Content.Parent = MainFrame

	Window.Frame = MainFrame
	Window.Content = Content
	Window.TabHolder = TabHolder

	function Window:AddTab(Name)
		local Tab = {
			Name = Name,
			Sections = {},
			Frame = nil,
		}

		local TabButton = Instance.new("TextButton")
		TabButton.Text = Name
		TabButton.Size = UDim2.new(0, 100, 1, 0)
		TabButton.BackgroundTransparency = 1
		TabButton.TextColor3 = Color3.fromRGB(200, 200, 200)
		TabButton.Font = Enum.Font.SourceSans
		TabButton.TextSize = 16
		TabButton.Parent = TabHolder

		local TabFrame = Instance.new("Frame")
		TabFrame.Size = UDim2.new(1, 0, 1, 0)
		TabFrame.BackgroundTransparency = 1
		TabFrame.Visible = false
		TabFrame.Parent = Content

		Tab.Frame = TabFrame

		TabButton.MouseButton1Click:Connect(function()
			for _, t in pairs(Window.Tabs) do
				t.Frame.Visible = false
			end
			TabFrame.Visible = true
			Window.CurrentTab = Tab
		end)

		function Tab:AddSection(Options)
			Options = Options or {}
			local Title = Options.Title or "Section"

			local Section = {
				Elements = {},
			}

			local SectionFrame = Instance.new("Frame")
			SectionFrame.Size = UDim2.new(0.5, -5, 1, 0)
			SectionFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
			SectionFrame.BorderSizePixel = 0
			SectionFrame.Parent = TabFrame

			local UICorner = Instance.new("UICorner")
			UICorner.CornerRadius = UDim.new(0, 4)
			UICorner.Parent = SectionFrame

			local SectionTitle = Instance.new("TextLabel")
			SectionTitle.Text = Title
			SectionTitle.Size = UDim2.new(1, 0, 0, 30)
			SectionTitle.BackgroundTransparency = 1
			SectionTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
			SectionTitle.Font = Enum.Font.SourceSansBold
			SectionTitle.TextSize = 16
			SectionTitle.Parent = SectionFrame

			local ElementHolder = Instance.new("Frame")
			ElementHolder.Size = UDim2.new(1, 0, 1, -30)
			ElementHolder.Position = UDim2.new(0, 0, 0, 30)
			ElementHolder.BackgroundTransparency = 1
			ElementHolder.Parent = SectionFrame

			local UIList = Instance.new("UIListLayout")
			UIList.SortOrder = Enum.SortOrder.LayoutOrder
			UIList.Padding = UDim.new(0, 5)
			UIList.Parent = ElementHolder

			Section.Frame = SectionFrame
			Section.ElementHolder = ElementHolder

			function Section:AddToggle(Options)
				Options = Options or {}
				local Text = Options.Text or "Toggle"
				local Default = Options.Default or false
				local Callback = Options.Callback or function() end

				local ToggleFrame = Instance.new("Frame")
				ToggleFrame.Size = UDim2.new(1, 0, 0, 30)
				ToggleFrame.BackgroundTransparency = 1
				ToggleFrame.Parent = ElementHolder

				local ToggleButton = Instance.new("TextButton")
				ToggleButton.Text = Text
				ToggleButton.Size = UDim2.new(1, -40, 1, 0)
				ToggleButton.Position = UDim2.new(0, 40, 0, 0)
				ToggleButton.BackgroundTransparency = 1
				ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
				ToggleButton.Font = Enum.Font.SourceSans
				ToggleButton.TextSize = 14
				ToggleButton.TextXAlignment = Enum.TextXAlignment.Left
				ToggleButton.Parent = ToggleFrame

				local ToggleBox = Instance.new("Frame")
				ToggleBox.Size = UDim2.new(0, 20, 0, 20)
				ToggleBox.Position = UDim2.new(0, 10, 0.5, 0)
				ToggleBox.AnchorPoint = Vector2.new(0, 0.5)
				ToggleBox.BackgroundColor3 = Default and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(100, 100, 100)
				ToggleBox.Parent = ToggleFrame

				local UICorner = Instance.new("UICorner")
				UICorner.CornerRadius = UDim.new(0, 4)
				UICorner.Parent = ToggleBox

				local Toggled = Default
				ToggleButton.MouseButton1Click:Connect(function()
					Toggled = not Toggled
					ToggleBox.BackgroundColor3 = Toggled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(100, 100, 100)
					Callback(Toggled)
				end)

				return ToggleButton
			end

			function Section:AddSlider(Options)
				Options = Options or {}
				local Text = Options.Text or "Slider"
				local Min = Options.Min or 0
				local Max = Options.Max or 100
				local Default = Options.Default or 50
				local Callback = Options.Callback or function() end

				local SliderFrame = Instance.new("Frame")
				SliderFrame.Size = UDim2.new(1, 0, 0, 50)
				SliderFrame.BackgroundTransparency = 1
				SliderFrame.Parent = ElementHolder

				local SliderLabel = Instance.new("TextLabel")
				SliderLabel.Text = Text .. ": " .. Default
				SliderLabel.Size = UDim2.new(1, 0, 0, 20)
				SliderLabel.BackgroundTransparency = 1
				SliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
				SliderLabel.Font = Enum.Font.SourceSans
				SliderLabel.TextSize = 14
				SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
				SliderLabel.Parent = SliderFrame

				local SliderBar = Instance.new("Frame")
				SliderBar.Size = UDim2.new(1, -20, 0, 10)
				SliderBar.Position = UDim2.new(0, 10, 0, 25)
				SliderBar.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
				SliderBar.Parent = SliderFrame

				local UICorner = Instance.new("UICorner")
				UICorner.CornerRadius = UDim.new(0, 5)
				UICorner.Parent = SliderBar

				local SliderFill = Instance.new("Frame")
				SliderFill.Size = UDim2.new((Default - Min) / (Max - Min), 0, 1, 0)
				SliderFill.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
				SliderFill.BorderSizePixel = 0
				SliderFill.Parent = SliderBar

				local UICorner2 = Instance.new("UICorner")
				UICorner2.CornerRadius = UDim.new(0, 5)
				UICorner2.Parent = SliderFill

				local Dragging = false
				SliderBar.InputBegan:Connect(function(Input)
					if Input.UserInputType == Enum.UserInputType.MouseButton1 then
						Dragging = true
					end
				end)

				SliderBar.InputEnded:Connect(function(Input)
					if Input.UserInputType == Enum.UserInputType.MouseButton1 then
						Dragging = false
					end
				end)

				UserInputService.InputChanged:Connect(function(Input)
					if Dragging and Input.UserInputType == Enum.UserInputType.MouseMovement then
						local MousePos = UserInputService:GetMouseLocation()
						local RelPos = (MousePos.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X
						local Value = math.clamp(Min + (Max - Min) * RelPos, Min, Max)
						SliderFill.Size = UDim2.new((Value - Min) / (Max - Min), 0, 1, 0)
						SliderLabel.Text = Text .. ": " .. math.floor(Value)
						Callback(Value)
					end
				end)

				return SliderFrame
			end

			table.insert(Tab.Sections, Section)
			return Section
		end

		table.insert(Window.Tabs, Tab)
		return Tab
	end

	table.insert(Library.Windows, Window)
	return Window
end

if getgenv then
	getgenv().OwnUI = Library
end

return Library
